<?php


function islandora_cpdv_get_external_form_get_associations(array $cmodel, array $dsid) {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  return xml_form_builder_get_associations(array(), $cmodel, $dsid);
}


/**
 * Implements hook_islandora_required_objects().
 */
function islandora_cpdv_islandora_required_objects(IslandoraTuque $connection) {
  
  $module_path = drupal_get_path('module', 'islandora_cpdv');
  // Audio Content Model
  $audio_content_model = $connection->repository->constructObject('cpdv:audioCModel');
  $audio_content_model->owner = 'fedoraAdmin';
  $audio_content_model->label = 'CPDV Audio Content Model';
  $audio_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_cpdv_ingest_ds_composite_datastream($audio_content_model, 'audio');

  // Video Content Model
  $video_content_model = $connection->repository->constructObject('cpdv:videoCModel');
  $video_content_model->owner = 'fedoraAdmin';
  $video_content_model->label = 'CPDV Video Content Model';
  $video_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_cpdv_ingest_ds_composite_datastream($video_content_model, 'video');

  // Image Content Model
  $image_content_model = $connection->repository->constructObject('cpdv:imageCModel');
  $image_content_model->owner = 'fedoraAdmin';
  $image_content_model->label = 'CPDV Image Content Model';
  $image_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_cpdv_ingest_ds_composite_datastream($image_content_model, 'image');

  // Text Content Model
  $text_content_model = $connection->repository->constructObject('cpdv:textCModel');
  $text_content_model->owner = 'fedoraAdmin';
  $text_content_model->label = 'CPDV Text Content Model';
  $text_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_cpdv_ingest_ds_composite_datastream($text_content_model, 'text');

  // Association Content Model
  $association_content_model = $connection->repository->constructObject('cpdv:associationCModel');
  $association_content_model->owner = 'fedoraAdmin';
  $association_content_model->label = 'CPDV association Content Model';
  $association_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_cpdv_ingest_ds_composite_datastream($association_content_model, 'association');

  // Word Content Model
  $word_content_model = $connection->repository->constructObject('cpdv:wordCModel');
  $word_content_model->owner = 'fedoraAdmin';
  $word_content_model->label = 'CPDV Word Content Model';
  $word_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_cpdv_ingest_ds_composite_datastream($word_content_model, 'word');

  // Person Content Model
  $person_content_model = $connection->repository->constructObject('cpdv:personCModel');
  $person_content_model->owner = 'fedoraAdmin';
  $person_content_model->label = 'CPDV Person Content Model';
  $person_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_cpdv_ingest_ds_composite_datastream($person_content_model, 'person');

  // cpdv Collection.
  $cpdv_collection = $connection->repository->constructObject('cpdv:cpdv_collection');
  $cpdv_collection->owner = 'fedoraAdmin';
  $cpdv_collection->label = 'CPDV Collection';
  $cpdv_collection->models = 'islandora:collectionCModel';
  $cpdv_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  // Collection Policy Datastream.
  
  $datastream = $cpdv_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_cpdv_collection_policy.xml", FALSE);
  $cpdv_collection->ingestDatastream($datastream);

  // TN Datastream.
  // $datastream = $cpdv_collection->constructDatastream('TN', 'M');
  // $datastream->label = 'Thumbnail';
  // $datastream->mimetype = 'image/png';
  // $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  // $cpdv_collection->ingestDatastream($datastream);

  return array(
    'islandora_cpdv' => array(
      'title' => 'Islandora CPDV',
      'objects' => array(
        $audio_content_model,
        $video_content_model,
        $image_content_model,
        $text_content_model,
        $association_content_model,
        $word_content_model,
        $person_content_model,
        $cpdv_collection,
      ),
    ),
  );
}

/**
 * This function will add an entity DS composite datastream to an object.
 *
 * @param AbstractObject $islandora_object
 *                 The object to add the DS composite datastream to.
 * @param $cm
 *                The content model
 *
 */
function islandora_cpdv_ingest_ds_composite_datastream(AbstractObject $islandora_object, $cm) {
  $module_path = drupal_get_path('module', 'islandora_cpdv');

  $ds_composite_datastream = $islandora_object->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $ds_composite_datastream->label = 'DS-COMPOSITE-MODEL';
  $ds_composite_datastream->mimetype = 'text/xml';
  $ds_composite_datastream->setContentFromFile("$module_path/xml/islandora_cpdv_{$cm}_ds_composite_model.xml", FALSE);
  $islandora_object->ingestDatastream($ds_composite_datastream);
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_cpdv_islandora_xml_form_builder_forms() {
  	
  $module_path = drupal_get_path('module', 'islandora_cpdv');
  return array(
    'Ethnography form' => array(
      'form_file' => "$module_path/xml/forms/islandora_cpdv_ethnography_form.xml",
    ),
    'Association form' => array(
      'form_file' => "$module_path/xml/forms/islandora_cpdv_association_form.xml",
    ),
    'Text form' => array(
      'form_file' => "$module_path/xml/forms/islandora_cpdv_text_form.xml",
    ),
    'Word form' => array(
      'form_file' => "$module_path/xml/forms/islandora_cpdv_word_form.xml",
    ),
    'Person form' => array(
      'form_file' => "$module_path/xml/forms/islandora_cpdv_person_form.xml",
    ),
  );
}

/**
 * Implements hook_islandora_content_model_forms_form_associations().
 */
function islandora_cpdv_islandora_content_model_forms_form_associations() {
	
  
    return array(
    'islandora_cpdv_audio_mods_form' => array(
      'content_model' => 'cpdv:audioCModel',
      'form_name' => 'Audio MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
	'islandora_cpdv_ethnography_form' => array(
      'content_model' => 'cpdv:audioCModel',
      'form_name' => 'Ethnography form',
      'dsid' => 'ETHNOGRAPHY',
      'title_field' => array('community', 'nation'),
      'transform' => '',
      'template' => FALSE,
    ),
    'islandora_cpdv_association_form' => array(
      'content_model' => 'cpdv:associationCModel',
      'form_name' => 'Association form',
      'dsid' => 'ASSOCIATION',
      'title_field' => array('community', 'nation'),
      'transform' => '',
      'template' => FALSE,
    ),
    'islandora_cpdv_person_form' => array(
      'content_model' => 'cpdv:personCModel',
      'form_name' => 'Person form',
      'dsid' => 'PERSON',
      'title_field' => array('identifiation', 'firstName', 'lastName'),
      'transform' => 'person2dc_cpdv.xsl',
      'template' => FALSE,
    ),
    'islandora_cpdv_text_form' => array(
      'content_model' => 'cpdv:textCModel',
      'form_name' => 'Text form',
      'dsid' => 'TEXT',
      'title_field' => array('identifiation', 'title'),
      'transform' => 'text2dc_cpdv.xsl',
      'template' => FALSE,
    ),
    'islandora_cpdv_word_form' => array(
      'content_model' => 'cpdv:wordCModel',
      'form_name' => 'Word form',
      'dsid' => 'WORD',
      'title_field' => array('spelling'),
      'transform' => 'word2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_cpdv_cpdv_audioCModel_islandora_ingest_steps() {
	//This are the args we are passing as metadatastep to our custom ingest form
	$islandora_cpdv_ethnography_form = array(
      'content_model' => 'cpdv:audioCModel',
      'form_name' => 'Ethnography form',
      'dsid' => 'ETHNOGRAPHY',
      'title_field' => array('community', 'nation'),
      'transform' => '',
      'template' => FALSE,
	  'id'=> 'islandora_cpdv_ethnography_form',	
	  );
  return array(
    'islandora_cpdv_audio_upload' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_audio_audio_upload_form',
      'module' => 'islandora_audio',
      'file' => 'includes/audio_upload.form.inc',
    ),
    'islandora_cpdv_audio_ethnography' => array(
      'weight' => 6,
      'type' => 'form',
      'form_id' => 'islandora_cpdv_xml_form_builder_additional_ingest_form',
      'module' => 'islandora_cpdv',
      'file' => 'includes/ingest.form.inc',
      'args' => array($islandora_cpdv_ethnography_form),
    ),
  );
}
  /**
   * Implements hook_islandora_ingest_steps_alter().
  */
 function islandora_cpdv_cpdv_audioCModel_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
	
     $select_association_form_step = !empty($steps['xml_form_builder_association_step']);
	 $step_storage = &islandora_ingest_form_get_step_storage($form_state, 'xml_form_builder_association_step');
     if ($select_association_form_step) {
 		//Means XML_form_builder is trying to give us a choice which metadataform we want to use
 		//In case we already defined one of this Forms in our ingestion steps we must deactivate this options to avoid duplicates
		//or at least remove the already present as additional ingest step 
		//First we iterate over those steps who have an ['args'] key. If present, Those are the additional metadatasteps.
		$form_steps = islandora_ingest_form_get_form_steps($form_state); //Filter the ingest steps to only steps of type 'form'.
		if (count($form_steps) > 1)//If we get only one,then that form is for sure the metadata_ingest_step
			{
			$form_step_filter_onlywith_args = function($o) 
				{
	      	  	return array_key_exists('args' ,$o );
				};
		
	   		 $form_steps_args= array_filter($form_steps, $form_step_filter_onlywith_args);
			 $removeKeys=array('xml_form_builder_association_step','xml_form_builder_metadata_step');
			 $user_steps_args=array_diff_key($form_steps_args, array_flip($removeKeys));//Lets keep only those forms defined as ingest_steps by the user that have and args argument
			 foreach($form_steps_args['xml_form_builder_association_step']['args'][0] as $forms => &$formargs)//Interate over the association_step args
				{
				foreach($user_steps_args as $userFormStep => $userFormStepDef)
					{
					if ($formargs['id']==$userFormStepDef['args'][0]['id'])
						{
						unset($form_steps_args['xml_form_builder_association_step']['args'][0][$forms]);	
						}
					}		
				
				}
				//Now $form_steps_args['xml_form_builder_association_step']['args'][0] has only those forms that are defined for this CMODEL but are not present as additional ingest steps.
				//Count how many we have
		        if (count($form_steps_args['xml_form_builder_association_step']['args'][0])<=1)//If we have 1 or less then this form is not longer needed
					{
						unset($steps['xml_form_builder_association_step']);
					
					}
				}
	   
        }
  }
  /**
   * Implements hook_form_FORM_ID_alter().
   * Alters the metadata edit form, in case we are dealing with a secondary stream and we don´t want to modify the Object's label (default)
  */ 
 function islandora_cpdv_form_xml_form_builder_edit_datastream_form_alter(array &$form, array &$form_state, $form_id)
 {
     
	
	 //here we don't have steps, but we need to know if the datastream to edit is main metadata stream or a secondary added to the ingest steps as custom metadata
	 //so we need to implement our own steps-search-evaluate function and do the same as the above function to evaluate what to do.
	 module_load_include('inc', 'islandora', 'includes/ingest.form');
     $other_steps=islandora_cpdv_get_other_form_steps($form_state);
	
	 
	 foreach($other_steps as $step=>$values)
	 	{
	 	   if ($values['args'][0]['id']==$form_state['association']['id'])
		   	 {
				 form_load_include($form_state, 'inc', 'islandora_cpdv', 'includes/ingest.form');
			     $title_field_parents = $form_state['association']['title_field'];
			     $title_field_parents[] = '#required';
			     $title_field = drupal_array_set_nested_value($form, $title_field_parents, TRUE);
     
				 $form['update'] = array(
			       '#type' => 'submit',
			       '#value' => t('Update'),
			       '#name' => 'update',
			       '#submit' => array('islandora_cpdv_xml_form_builder_additional_edit_datastream_form_metadata_form_submit'),
			     );
				 break 1;
			}
	   }
	
 	
     	 	 	 	
 }
 
 
 function islandora_cpdv_get_other_form_steps($form_state) {
   module_load_include('inc', 'islandora', 'includes/utilities');
   $steps = &drupal_static(__FUNCTION__);
   if (isset($steps)) {
     return $steps;
   }
   $steps = array();
   if (!empty($form_state['association']))
   		{
   		foreach (islandora_build_hook_list(ISLANDORA_INGEST_STEP_HOOK, array($form_state['association']['content_model'])) as $hook) {
     
     foreach (module_implements($hook) as $module) {
       $function = $module . '_' . $hook;
       $module_steps = (array) $function($form_state);
       $steps = array_merge($steps, $module_steps);
     }
   }
   $steps = array_filter($steps);
   $form_step_filter = function($o) {
	   return (($o['type'] == 'form') && (array_key_exists('args',$o)))?count($o['args']):false;
	 
   };
   $steps = array_filter($steps, $form_step_filter);
   //$steps should now contain only form steps that have and args array 
   foreach (islandora_build_hook_list(ISLANDORA_INGEST_STEP_HOOK,  array($form_state['association']['content_model'])) as $hook) {
     drupal_alter($hook, $steps, $form_state);
   }
   // Add any defaults.
   foreach ($steps as $key => &$step) { 
	 $step['id'] = $key;
   }
   uasort($steps, 'drupal_sort_weight');
}
   return $steps;
 
}
 
  
